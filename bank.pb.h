// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto

#ifndef PROTOBUF_INCLUDED_bank_2eproto
#define PROTOBUF_INCLUDED_bank_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bank_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_bank_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_bank_2eproto();
class BranchMessage;
class BranchMessageDefaultTypeInternal;
extern BranchMessageDefaultTypeInternal _BranchMessage_default_instance_;
class InitBranch;
class InitBranchDefaultTypeInternal;
extern InitBranchDefaultTypeInternal _InitBranch_default_instance_;
class InitBranch_Branch;
class InitBranch_BranchDefaultTypeInternal;
extern InitBranch_BranchDefaultTypeInternal _InitBranch_Branch_default_instance_;
class InitSnapshot;
class InitSnapshotDefaultTypeInternal;
extern InitSnapshotDefaultTypeInternal _InitSnapshot_default_instance_;
class Marker;
class MarkerDefaultTypeInternal;
extern MarkerDefaultTypeInternal _Marker_default_instance_;
class RetrieveSnapshot;
class RetrieveSnapshotDefaultTypeInternal;
extern RetrieveSnapshotDefaultTypeInternal _RetrieveSnapshot_default_instance_;
class ReturnSnapshot;
class ReturnSnapshotDefaultTypeInternal;
extern ReturnSnapshotDefaultTypeInternal _ReturnSnapshot_default_instance_;
class ReturnSnapshot_LocalSnapshot;
class ReturnSnapshot_LocalSnapshotDefaultTypeInternal;
extern ReturnSnapshot_LocalSnapshotDefaultTypeInternal _ReturnSnapshot_LocalSnapshot_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
namespace google {
namespace protobuf {
template<> ::BranchMessage* Arena::CreateMaybeMessage<::BranchMessage>(Arena*);
template<> ::InitBranch* Arena::CreateMaybeMessage<::InitBranch>(Arena*);
template<> ::InitBranch_Branch* Arena::CreateMaybeMessage<::InitBranch_Branch>(Arena*);
template<> ::InitSnapshot* Arena::CreateMaybeMessage<::InitSnapshot>(Arena*);
template<> ::Marker* Arena::CreateMaybeMessage<::Marker>(Arena*);
template<> ::RetrieveSnapshot* Arena::CreateMaybeMessage<::RetrieveSnapshot>(Arena*);
template<> ::ReturnSnapshot* Arena::CreateMaybeMessage<::ReturnSnapshot>(Arena*);
template<> ::ReturnSnapshot_LocalSnapshot* Arena::CreateMaybeMessage<::ReturnSnapshot_LocalSnapshot>(Arena*);
template<> ::Transfer* Arena::CreateMaybeMessage<::Transfer>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class InitBranch_Branch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InitBranch.Branch) */ {
 public:
  InitBranch_Branch();
  virtual ~InitBranch_Branch();

  InitBranch_Branch(const InitBranch_Branch& from);

  inline InitBranch_Branch& operator=(const InitBranch_Branch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitBranch_Branch(InitBranch_Branch&& from) noexcept
    : InitBranch_Branch() {
    *this = ::std::move(from);
  }

  inline InitBranch_Branch& operator=(InitBranch_Branch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InitBranch_Branch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitBranch_Branch* internal_default_instance() {
    return reinterpret_cast<const InitBranch_Branch*>(
               &_InitBranch_Branch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InitBranch_Branch* other);
  friend void swap(InitBranch_Branch& a, InitBranch_Branch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitBranch_Branch* New() const final {
    return CreateMaybeMessage<InitBranch_Branch>(nullptr);
  }

  InitBranch_Branch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitBranch_Branch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitBranch_Branch& from);
  void MergeFrom(const InitBranch_Branch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitBranch_Branch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:InitBranch.Branch)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class InitBranch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InitBranch) */ {
 public:
  InitBranch();
  virtual ~InitBranch();

  InitBranch(const InitBranch& from);

  inline InitBranch& operator=(const InitBranch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitBranch(InitBranch&& from) noexcept
    : InitBranch() {
    *this = ::std::move(from);
  }

  inline InitBranch& operator=(InitBranch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InitBranch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitBranch* internal_default_instance() {
    return reinterpret_cast<const InitBranch*>(
               &_InitBranch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InitBranch* other);
  friend void swap(InitBranch& a, InitBranch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitBranch* New() const final {
    return CreateMaybeMessage<InitBranch>(nullptr);
  }

  InitBranch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitBranch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitBranch& from);
  void MergeFrom(const InitBranch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitBranch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InitBranch_Branch Branch;

  // accessors -------------------------------------------------------

  // repeated .InitBranch.Branch all_branches = 2;
  int all_branches_size() const;
  void clear_all_branches();
  static const int kAllBranchesFieldNumber = 2;
  ::InitBranch_Branch* mutable_all_branches(int index);
  ::google::protobuf::RepeatedPtrField< ::InitBranch_Branch >*
      mutable_all_branches();
  const ::InitBranch_Branch& all_branches(int index) const;
  ::InitBranch_Branch* add_all_branches();
  const ::google::protobuf::RepeatedPtrField< ::InitBranch_Branch >&
      all_branches() const;

  // uint32 balance = 1;
  void clear_balance();
  static const int kBalanceFieldNumber = 1;
  ::google::protobuf::uint32 balance() const;
  void set_balance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:InitBranch)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::InitBranch_Branch > all_branches_;
  ::google::protobuf::uint32 balance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Transfer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Transfer) */ {
 public:
  Transfer();
  virtual ~Transfer();

  Transfer(const Transfer& from);

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Transfer* other);
  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string send_branch = 1;
  void clear_send_branch();
  static const int kSendBranchFieldNumber = 1;
  const ::std::string& send_branch() const;
  void set_send_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_send_branch(::std::string&& value);
  #endif
  void set_send_branch(const char* value);
  void set_send_branch(const char* value, size_t size);
  ::std::string* mutable_send_branch();
  ::std::string* release_send_branch();
  void set_allocated_send_branch(::std::string* send_branch);

  // uint32 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint32 amount() const;
  void set_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Transfer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr send_branch_;
  ::google::protobuf::uint32 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class InitSnapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InitSnapshot) */ {
 public:
  InitSnapshot();
  virtual ~InitSnapshot();

  InitSnapshot(const InitSnapshot& from);

  inline InitSnapshot& operator=(const InitSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitSnapshot(InitSnapshot&& from) noexcept
    : InitSnapshot() {
    *this = ::std::move(from);
  }

  inline InitSnapshot& operator=(InitSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InitSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitSnapshot* internal_default_instance() {
    return reinterpret_cast<const InitSnapshot*>(
               &_InitSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(InitSnapshot* other);
  friend void swap(InitSnapshot& a, InitSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitSnapshot* New() const final {
    return CreateMaybeMessage<InitSnapshot>(nullptr);
  }

  InitSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitSnapshot& from);
  void MergeFrom(const InitSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 snapshot_id = 1;
  void clear_snapshot_id();
  static const int kSnapshotIdFieldNumber = 1;
  ::google::protobuf::uint32 snapshot_id() const;
  void set_snapshot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:InitSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 snapshot_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Marker final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Marker) */ {
 public:
  Marker();
  virtual ~Marker();

  Marker(const Marker& from);

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Marker(Marker&& from) noexcept
    : Marker() {
    *this = ::std::move(from);
  }

  inline Marker& operator=(Marker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Marker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Marker* internal_default_instance() {
    return reinterpret_cast<const Marker*>(
               &_Marker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Marker* other);
  friend void swap(Marker& a, Marker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Marker* New() const final {
    return CreateMaybeMessage<Marker>(nullptr);
  }

  Marker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Marker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Marker& from);
  void MergeFrom(const Marker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string send_branch = 1;
  void clear_send_branch();
  static const int kSendBranchFieldNumber = 1;
  const ::std::string& send_branch() const;
  void set_send_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_send_branch(::std::string&& value);
  #endif
  void set_send_branch(const char* value);
  void set_send_branch(const char* value, size_t size);
  ::std::string* mutable_send_branch();
  ::std::string* release_send_branch();
  void set_allocated_send_branch(::std::string* send_branch);

  // uint32 snapshot_id = 2;
  void clear_snapshot_id();
  static const int kSnapshotIdFieldNumber = 2;
  ::google::protobuf::uint32 snapshot_id() const;
  void set_snapshot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Marker)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr send_branch_;
  ::google::protobuf::uint32 snapshot_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class RetrieveSnapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RetrieveSnapshot) */ {
 public:
  RetrieveSnapshot();
  virtual ~RetrieveSnapshot();

  RetrieveSnapshot(const RetrieveSnapshot& from);

  inline RetrieveSnapshot& operator=(const RetrieveSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RetrieveSnapshot(RetrieveSnapshot&& from) noexcept
    : RetrieveSnapshot() {
    *this = ::std::move(from);
  }

  inline RetrieveSnapshot& operator=(RetrieveSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RetrieveSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetrieveSnapshot* internal_default_instance() {
    return reinterpret_cast<const RetrieveSnapshot*>(
               &_RetrieveSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RetrieveSnapshot* other);
  friend void swap(RetrieveSnapshot& a, RetrieveSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetrieveSnapshot* New() const final {
    return CreateMaybeMessage<RetrieveSnapshot>(nullptr);
  }

  RetrieveSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RetrieveSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RetrieveSnapshot& from);
  void MergeFrom(const RetrieveSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 snapshot_id = 1;
  void clear_snapshot_id();
  static const int kSnapshotIdFieldNumber = 1;
  ::google::protobuf::uint32 snapshot_id() const;
  void set_snapshot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RetrieveSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 snapshot_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class ReturnSnapshot_LocalSnapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReturnSnapshot.LocalSnapshot) */ {
 public:
  ReturnSnapshot_LocalSnapshot();
  virtual ~ReturnSnapshot_LocalSnapshot();

  ReturnSnapshot_LocalSnapshot(const ReturnSnapshot_LocalSnapshot& from);

  inline ReturnSnapshot_LocalSnapshot& operator=(const ReturnSnapshot_LocalSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReturnSnapshot_LocalSnapshot(ReturnSnapshot_LocalSnapshot&& from) noexcept
    : ReturnSnapshot_LocalSnapshot() {
    *this = ::std::move(from);
  }

  inline ReturnSnapshot_LocalSnapshot& operator=(ReturnSnapshot_LocalSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReturnSnapshot_LocalSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReturnSnapshot_LocalSnapshot* internal_default_instance() {
    return reinterpret_cast<const ReturnSnapshot_LocalSnapshot*>(
               &_ReturnSnapshot_LocalSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReturnSnapshot_LocalSnapshot* other);
  friend void swap(ReturnSnapshot_LocalSnapshot& a, ReturnSnapshot_LocalSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReturnSnapshot_LocalSnapshot* New() const final {
    return CreateMaybeMessage<ReturnSnapshot_LocalSnapshot>(nullptr);
  }

  ReturnSnapshot_LocalSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReturnSnapshot_LocalSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReturnSnapshot_LocalSnapshot& from);
  void MergeFrom(const ReturnSnapshot_LocalSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnSnapshot_LocalSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 channel_state = 3;
  int channel_state_size() const;
  void clear_channel_state();
  static const int kChannelStateFieldNumber = 3;
  ::google::protobuf::uint32 channel_state(int index) const;
  void set_channel_state(int index, ::google::protobuf::uint32 value);
  void add_channel_state(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channel_state() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channel_state();

  // uint32 snapshot_id = 1;
  void clear_snapshot_id();
  static const int kSnapshotIdFieldNumber = 1;
  ::google::protobuf::uint32 snapshot_id() const;
  void set_snapshot_id(::google::protobuf::uint32 value);

  // uint32 balance = 2;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  ::google::protobuf::uint32 balance() const;
  void set_balance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ReturnSnapshot.LocalSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channel_state_;
  mutable std::atomic<int> _channel_state_cached_byte_size_;
  ::google::protobuf::uint32 snapshot_id_;
  ::google::protobuf::uint32 balance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class ReturnSnapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReturnSnapshot) */ {
 public:
  ReturnSnapshot();
  virtual ~ReturnSnapshot();

  ReturnSnapshot(const ReturnSnapshot& from);

  inline ReturnSnapshot& operator=(const ReturnSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReturnSnapshot(ReturnSnapshot&& from) noexcept
    : ReturnSnapshot() {
    *this = ::std::move(from);
  }

  inline ReturnSnapshot& operator=(ReturnSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReturnSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReturnSnapshot* internal_default_instance() {
    return reinterpret_cast<const ReturnSnapshot*>(
               &_ReturnSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReturnSnapshot* other);
  friend void swap(ReturnSnapshot& a, ReturnSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReturnSnapshot* New() const final {
    return CreateMaybeMessage<ReturnSnapshot>(nullptr);
  }

  ReturnSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReturnSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReturnSnapshot& from);
  void MergeFrom(const ReturnSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReturnSnapshot_LocalSnapshot LocalSnapshot;

  // accessors -------------------------------------------------------

  // .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
  bool has_local_snapshot() const;
  void clear_local_snapshot();
  static const int kLocalSnapshotFieldNumber = 1;
  const ::ReturnSnapshot_LocalSnapshot& local_snapshot() const;
  ::ReturnSnapshot_LocalSnapshot* release_local_snapshot();
  ::ReturnSnapshot_LocalSnapshot* mutable_local_snapshot();
  void set_allocated_local_snapshot(::ReturnSnapshot_LocalSnapshot* local_snapshot);

  // @@protoc_insertion_point(class_scope:ReturnSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ReturnSnapshot_LocalSnapshot* local_snapshot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class BranchMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BranchMessage) */ {
 public:
  BranchMessage();
  virtual ~BranchMessage();

  BranchMessage(const BranchMessage& from);

  inline BranchMessage& operator=(const BranchMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BranchMessage(BranchMessage&& from) noexcept
    : BranchMessage() {
    *this = ::std::move(from);
  }

  inline BranchMessage& operator=(BranchMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BranchMessage& default_instance();

  enum BranchMessageCase {
    kInitBranch = 1,
    kTransfer = 2,
    kInitSnapshot = 3,
    kMarker = 4,
    kRetrieveSnapshot = 5,
    kReturnSnapshot = 6,
    BRANCH_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BranchMessage* internal_default_instance() {
    return reinterpret_cast<const BranchMessage*>(
               &_BranchMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BranchMessage* other);
  friend void swap(BranchMessage& a, BranchMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BranchMessage* New() const final {
    return CreateMaybeMessage<BranchMessage>(nullptr);
  }

  BranchMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BranchMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BranchMessage& from);
  void MergeFrom(const BranchMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BranchMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .InitBranch init_branch = 1;
  bool has_init_branch() const;
  void clear_init_branch();
  static const int kInitBranchFieldNumber = 1;
  const ::InitBranch& init_branch() const;
  ::InitBranch* release_init_branch();
  ::InitBranch* mutable_init_branch();
  void set_allocated_init_branch(::InitBranch* init_branch);

  // .Transfer transfer = 2;
  bool has_transfer() const;
  void clear_transfer();
  static const int kTransferFieldNumber = 2;
  const ::Transfer& transfer() const;
  ::Transfer* release_transfer();
  ::Transfer* mutable_transfer();
  void set_allocated_transfer(::Transfer* transfer);

  // .InitSnapshot init_snapshot = 3;
  bool has_init_snapshot() const;
  void clear_init_snapshot();
  static const int kInitSnapshotFieldNumber = 3;
  const ::InitSnapshot& init_snapshot() const;
  ::InitSnapshot* release_init_snapshot();
  ::InitSnapshot* mutable_init_snapshot();
  void set_allocated_init_snapshot(::InitSnapshot* init_snapshot);

  // .Marker marker = 4;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 4;
  const ::Marker& marker() const;
  ::Marker* release_marker();
  ::Marker* mutable_marker();
  void set_allocated_marker(::Marker* marker);

  // .RetrieveSnapshot retrieve_snapshot = 5;
  bool has_retrieve_snapshot() const;
  void clear_retrieve_snapshot();
  static const int kRetrieveSnapshotFieldNumber = 5;
  const ::RetrieveSnapshot& retrieve_snapshot() const;
  ::RetrieveSnapshot* release_retrieve_snapshot();
  ::RetrieveSnapshot* mutable_retrieve_snapshot();
  void set_allocated_retrieve_snapshot(::RetrieveSnapshot* retrieve_snapshot);

  // .ReturnSnapshot return_snapshot = 6;
  bool has_return_snapshot() const;
  void clear_return_snapshot();
  static const int kReturnSnapshotFieldNumber = 6;
  const ::ReturnSnapshot& return_snapshot() const;
  ::ReturnSnapshot* release_return_snapshot();
  ::ReturnSnapshot* mutable_return_snapshot();
  void set_allocated_return_snapshot(::ReturnSnapshot* return_snapshot);

  void clear_branch_message();
  BranchMessageCase branch_message_case() const;
  // @@protoc_insertion_point(class_scope:BranchMessage)
 private:
  class HasBitSetters;
  void set_has_init_branch();
  void set_has_transfer();
  void set_has_init_snapshot();
  void set_has_marker();
  void set_has_retrieve_snapshot();
  void set_has_return_snapshot();

  inline bool has_branch_message() const;
  inline void clear_has_branch_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union BranchMessageUnion {
    BranchMessageUnion() {}
    ::InitBranch* init_branch_;
    ::Transfer* transfer_;
    ::InitSnapshot* init_snapshot_;
    ::Marker* marker_;
    ::RetrieveSnapshot* retrieve_snapshot_;
    ::ReturnSnapshot* return_snapshot_;
  } branch_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bank_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitBranch_Branch

// string name = 1;
inline void InitBranch_Branch::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitBranch_Branch::name() const {
  // @@protoc_insertion_point(field_get:InitBranch.Branch.name)
  return name_.GetNoArena();
}
inline void InitBranch_Branch::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitBranch.Branch.name)
}
#if LANG_CXX11
inline void InitBranch_Branch::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InitBranch.Branch.name)
}
#endif
inline void InitBranch_Branch::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitBranch.Branch.name)
}
inline void InitBranch_Branch::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitBranch.Branch.name)
}
inline ::std::string* InitBranch_Branch::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:InitBranch.Branch.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitBranch_Branch::release_name() {
  // @@protoc_insertion_point(field_release:InitBranch.Branch.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitBranch_Branch::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:InitBranch.Branch.name)
}

// string ip = 2;
inline void InitBranch_Branch::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitBranch_Branch::ip() const {
  // @@protoc_insertion_point(field_get:InitBranch.Branch.ip)
  return ip_.GetNoArena();
}
inline void InitBranch_Branch::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitBranch.Branch.ip)
}
#if LANG_CXX11
inline void InitBranch_Branch::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InitBranch.Branch.ip)
}
#endif
inline void InitBranch_Branch::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitBranch.Branch.ip)
}
inline void InitBranch_Branch::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitBranch.Branch.ip)
}
inline ::std::string* InitBranch_Branch::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:InitBranch.Branch.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitBranch_Branch::release_ip() {
  // @@protoc_insertion_point(field_release:InitBranch.Branch.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitBranch_Branch::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:InitBranch.Branch.ip)
}

// uint32 port = 3;
inline void InitBranch_Branch::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 InitBranch_Branch::port() const {
  // @@protoc_insertion_point(field_get:InitBranch.Branch.port)
  return port_;
}
inline void InitBranch_Branch::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:InitBranch.Branch.port)
}

// -------------------------------------------------------------------

// InitBranch

// uint32 balance = 1;
inline void InitBranch::clear_balance() {
  balance_ = 0u;
}
inline ::google::protobuf::uint32 InitBranch::balance() const {
  // @@protoc_insertion_point(field_get:InitBranch.balance)
  return balance_;
}
inline void InitBranch::set_balance(::google::protobuf::uint32 value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:InitBranch.balance)
}

// repeated .InitBranch.Branch all_branches = 2;
inline int InitBranch::all_branches_size() const {
  return all_branches_.size();
}
inline void InitBranch::clear_all_branches() {
  all_branches_.Clear();
}
inline ::InitBranch_Branch* InitBranch::mutable_all_branches(int index) {
  // @@protoc_insertion_point(field_mutable:InitBranch.all_branches)
  return all_branches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::InitBranch_Branch >*
InitBranch::mutable_all_branches() {
  // @@protoc_insertion_point(field_mutable_list:InitBranch.all_branches)
  return &all_branches_;
}
inline const ::InitBranch_Branch& InitBranch::all_branches(int index) const {
  // @@protoc_insertion_point(field_get:InitBranch.all_branches)
  return all_branches_.Get(index);
}
inline ::InitBranch_Branch* InitBranch::add_all_branches() {
  // @@protoc_insertion_point(field_add:InitBranch.all_branches)
  return all_branches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InitBranch_Branch >&
InitBranch::all_branches() const {
  // @@protoc_insertion_point(field_list:InitBranch.all_branches)
  return all_branches_;
}

// -------------------------------------------------------------------

// Transfer

// string send_branch = 1;
inline void Transfer::clear_send_branch() {
  send_branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::send_branch() const {
  // @@protoc_insertion_point(field_get:Transfer.send_branch)
  return send_branch_.GetNoArena();
}
inline void Transfer::set_send_branch(const ::std::string& value) {
  
  send_branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.send_branch)
}
#if LANG_CXX11
inline void Transfer::set_send_branch(::std::string&& value) {
  
  send_branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.send_branch)
}
#endif
inline void Transfer::set_send_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  send_branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.send_branch)
}
inline void Transfer::set_send_branch(const char* value, size_t size) {
  
  send_branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.send_branch)
}
inline ::std::string* Transfer::mutable_send_branch() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.send_branch)
  return send_branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_send_branch() {
  // @@protoc_insertion_point(field_release:Transfer.send_branch)
  
  return send_branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_send_branch(::std::string* send_branch) {
  if (send_branch != nullptr) {
    
  } else {
    
  }
  send_branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_branch);
  // @@protoc_insertion_point(field_set_allocated:Transfer.send_branch)
}

// uint32 amount = 2;
inline void Transfer::clear_amount() {
  amount_ = 0u;
}
inline ::google::protobuf::uint32 Transfer::amount() const {
  // @@protoc_insertion_point(field_get:Transfer.amount)
  return amount_;
}
inline void Transfer::set_amount(::google::protobuf::uint32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Transfer.amount)
}

// -------------------------------------------------------------------

// InitSnapshot

// uint32 snapshot_id = 1;
inline void InitSnapshot::clear_snapshot_id() {
  snapshot_id_ = 0u;
}
inline ::google::protobuf::uint32 InitSnapshot::snapshot_id() const {
  // @@protoc_insertion_point(field_get:InitSnapshot.snapshot_id)
  return snapshot_id_;
}
inline void InitSnapshot::set_snapshot_id(::google::protobuf::uint32 value) {
  
  snapshot_id_ = value;
  // @@protoc_insertion_point(field_set:InitSnapshot.snapshot_id)
}

// -------------------------------------------------------------------

// Marker

// string send_branch = 1;
inline void Marker::clear_send_branch() {
  send_branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Marker::send_branch() const {
  // @@protoc_insertion_point(field_get:Marker.send_branch)
  return send_branch_.GetNoArena();
}
inline void Marker::set_send_branch(const ::std::string& value) {
  
  send_branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Marker.send_branch)
}
#if LANG_CXX11
inline void Marker::set_send_branch(::std::string&& value) {
  
  send_branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Marker.send_branch)
}
#endif
inline void Marker::set_send_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  send_branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Marker.send_branch)
}
inline void Marker::set_send_branch(const char* value, size_t size) {
  
  send_branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Marker.send_branch)
}
inline ::std::string* Marker::mutable_send_branch() {
  
  // @@protoc_insertion_point(field_mutable:Marker.send_branch)
  return send_branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Marker::release_send_branch() {
  // @@protoc_insertion_point(field_release:Marker.send_branch)
  
  return send_branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_send_branch(::std::string* send_branch) {
  if (send_branch != nullptr) {
    
  } else {
    
  }
  send_branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_branch);
  // @@protoc_insertion_point(field_set_allocated:Marker.send_branch)
}

// uint32 snapshot_id = 2;
inline void Marker::clear_snapshot_id() {
  snapshot_id_ = 0u;
}
inline ::google::protobuf::uint32 Marker::snapshot_id() const {
  // @@protoc_insertion_point(field_get:Marker.snapshot_id)
  return snapshot_id_;
}
inline void Marker::set_snapshot_id(::google::protobuf::uint32 value) {
  
  snapshot_id_ = value;
  // @@protoc_insertion_point(field_set:Marker.snapshot_id)
}

// -------------------------------------------------------------------

// RetrieveSnapshot

// uint32 snapshot_id = 1;
inline void RetrieveSnapshot::clear_snapshot_id() {
  snapshot_id_ = 0u;
}
inline ::google::protobuf::uint32 RetrieveSnapshot::snapshot_id() const {
  // @@protoc_insertion_point(field_get:RetrieveSnapshot.snapshot_id)
  return snapshot_id_;
}
inline void RetrieveSnapshot::set_snapshot_id(::google::protobuf::uint32 value) {
  
  snapshot_id_ = value;
  // @@protoc_insertion_point(field_set:RetrieveSnapshot.snapshot_id)
}

// -------------------------------------------------------------------

// ReturnSnapshot_LocalSnapshot

// uint32 snapshot_id = 1;
inline void ReturnSnapshot_LocalSnapshot::clear_snapshot_id() {
  snapshot_id_ = 0u;
}
inline ::google::protobuf::uint32 ReturnSnapshot_LocalSnapshot::snapshot_id() const {
  // @@protoc_insertion_point(field_get:ReturnSnapshot.LocalSnapshot.snapshot_id)
  return snapshot_id_;
}
inline void ReturnSnapshot_LocalSnapshot::set_snapshot_id(::google::protobuf::uint32 value) {
  
  snapshot_id_ = value;
  // @@protoc_insertion_point(field_set:ReturnSnapshot.LocalSnapshot.snapshot_id)
}

// uint32 balance = 2;
inline void ReturnSnapshot_LocalSnapshot::clear_balance() {
  balance_ = 0u;
}
inline ::google::protobuf::uint32 ReturnSnapshot_LocalSnapshot::balance() const {
  // @@protoc_insertion_point(field_get:ReturnSnapshot.LocalSnapshot.balance)
  return balance_;
}
inline void ReturnSnapshot_LocalSnapshot::set_balance(::google::protobuf::uint32 value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:ReturnSnapshot.LocalSnapshot.balance)
}

// repeated uint32 channel_state = 3;
inline int ReturnSnapshot_LocalSnapshot::channel_state_size() const {
  return channel_state_.size();
}
inline void ReturnSnapshot_LocalSnapshot::clear_channel_state() {
  channel_state_.Clear();
}
inline ::google::protobuf::uint32 ReturnSnapshot_LocalSnapshot::channel_state(int index) const {
  // @@protoc_insertion_point(field_get:ReturnSnapshot.LocalSnapshot.channel_state)
  return channel_state_.Get(index);
}
inline void ReturnSnapshot_LocalSnapshot::set_channel_state(int index, ::google::protobuf::uint32 value) {
  channel_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:ReturnSnapshot.LocalSnapshot.channel_state)
}
inline void ReturnSnapshot_LocalSnapshot::add_channel_state(::google::protobuf::uint32 value) {
  channel_state_.Add(value);
  // @@protoc_insertion_point(field_add:ReturnSnapshot.LocalSnapshot.channel_state)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReturnSnapshot_LocalSnapshot::channel_state() const {
  // @@protoc_insertion_point(field_list:ReturnSnapshot.LocalSnapshot.channel_state)
  return channel_state_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReturnSnapshot_LocalSnapshot::mutable_channel_state() {
  // @@protoc_insertion_point(field_mutable_list:ReturnSnapshot.LocalSnapshot.channel_state)
  return &channel_state_;
}

// -------------------------------------------------------------------

// ReturnSnapshot

// .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
inline bool ReturnSnapshot::has_local_snapshot() const {
  return this != internal_default_instance() && local_snapshot_ != nullptr;
}
inline void ReturnSnapshot::clear_local_snapshot() {
  if (GetArenaNoVirtual() == nullptr && local_snapshot_ != nullptr) {
    delete local_snapshot_;
  }
  local_snapshot_ = nullptr;
}
inline const ::ReturnSnapshot_LocalSnapshot& ReturnSnapshot::local_snapshot() const {
  const ::ReturnSnapshot_LocalSnapshot* p = local_snapshot_;
  // @@protoc_insertion_point(field_get:ReturnSnapshot.local_snapshot)
  return p != nullptr ? *p : *reinterpret_cast<const ::ReturnSnapshot_LocalSnapshot*>(
      &::_ReturnSnapshot_LocalSnapshot_default_instance_);
}
inline ::ReturnSnapshot_LocalSnapshot* ReturnSnapshot::release_local_snapshot() {
  // @@protoc_insertion_point(field_release:ReturnSnapshot.local_snapshot)
  
  ::ReturnSnapshot_LocalSnapshot* temp = local_snapshot_;
  local_snapshot_ = nullptr;
  return temp;
}
inline ::ReturnSnapshot_LocalSnapshot* ReturnSnapshot::mutable_local_snapshot() {
  
  if (local_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::ReturnSnapshot_LocalSnapshot>(GetArenaNoVirtual());
    local_snapshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ReturnSnapshot.local_snapshot)
  return local_snapshot_;
}
inline void ReturnSnapshot::set_allocated_local_snapshot(::ReturnSnapshot_LocalSnapshot* local_snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_snapshot_;
  }
  if (local_snapshot) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  local_snapshot_ = local_snapshot;
  // @@protoc_insertion_point(field_set_allocated:ReturnSnapshot.local_snapshot)
}

// -------------------------------------------------------------------

// BranchMessage

// .InitBranch init_branch = 1;
inline bool BranchMessage::has_init_branch() const {
  return branch_message_case() == kInitBranch;
}
inline void BranchMessage::set_has_init_branch() {
  _oneof_case_[0] = kInitBranch;
}
inline void BranchMessage::clear_init_branch() {
  if (has_init_branch()) {
    delete branch_message_.init_branch_;
    clear_has_branch_message();
  }
}
inline ::InitBranch* BranchMessage::release_init_branch() {
  // @@protoc_insertion_point(field_release:BranchMessage.init_branch)
  if (has_init_branch()) {
    clear_has_branch_message();
      ::InitBranch* temp = branch_message_.init_branch_;
    branch_message_.init_branch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InitBranch& BranchMessage::init_branch() const {
  // @@protoc_insertion_point(field_get:BranchMessage.init_branch)
  return has_init_branch()
      ? *branch_message_.init_branch_
      : *reinterpret_cast< ::InitBranch*>(&::_InitBranch_default_instance_);
}
inline ::InitBranch* BranchMessage::mutable_init_branch() {
  if (!has_init_branch()) {
    clear_branch_message();
    set_has_init_branch();
    branch_message_.init_branch_ = CreateMaybeMessage< ::InitBranch >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:BranchMessage.init_branch)
  return branch_message_.init_branch_;
}

// .Transfer transfer = 2;
inline bool BranchMessage::has_transfer() const {
  return branch_message_case() == kTransfer;
}
inline void BranchMessage::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void BranchMessage::clear_transfer() {
  if (has_transfer()) {
    delete branch_message_.transfer_;
    clear_has_branch_message();
  }
}
inline ::Transfer* BranchMessage::release_transfer() {
  // @@protoc_insertion_point(field_release:BranchMessage.transfer)
  if (has_transfer()) {
    clear_has_branch_message();
      ::Transfer* temp = branch_message_.transfer_;
    branch_message_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Transfer& BranchMessage::transfer() const {
  // @@protoc_insertion_point(field_get:BranchMessage.transfer)
  return has_transfer()
      ? *branch_message_.transfer_
      : *reinterpret_cast< ::Transfer*>(&::_Transfer_default_instance_);
}
inline ::Transfer* BranchMessage::mutable_transfer() {
  if (!has_transfer()) {
    clear_branch_message();
    set_has_transfer();
    branch_message_.transfer_ = CreateMaybeMessage< ::Transfer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:BranchMessage.transfer)
  return branch_message_.transfer_;
}

// .InitSnapshot init_snapshot = 3;
inline bool BranchMessage::has_init_snapshot() const {
  return branch_message_case() == kInitSnapshot;
}
inline void BranchMessage::set_has_init_snapshot() {
  _oneof_case_[0] = kInitSnapshot;
}
inline void BranchMessage::clear_init_snapshot() {
  if (has_init_snapshot()) {
    delete branch_message_.init_snapshot_;
    clear_has_branch_message();
  }
}
inline ::InitSnapshot* BranchMessage::release_init_snapshot() {
  // @@protoc_insertion_point(field_release:BranchMessage.init_snapshot)
  if (has_init_snapshot()) {
    clear_has_branch_message();
      ::InitSnapshot* temp = branch_message_.init_snapshot_;
    branch_message_.init_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InitSnapshot& BranchMessage::init_snapshot() const {
  // @@protoc_insertion_point(field_get:BranchMessage.init_snapshot)
  return has_init_snapshot()
      ? *branch_message_.init_snapshot_
      : *reinterpret_cast< ::InitSnapshot*>(&::_InitSnapshot_default_instance_);
}
inline ::InitSnapshot* BranchMessage::mutable_init_snapshot() {
  if (!has_init_snapshot()) {
    clear_branch_message();
    set_has_init_snapshot();
    branch_message_.init_snapshot_ = CreateMaybeMessage< ::InitSnapshot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:BranchMessage.init_snapshot)
  return branch_message_.init_snapshot_;
}

// .Marker marker = 4;
inline bool BranchMessage::has_marker() const {
  return branch_message_case() == kMarker;
}
inline void BranchMessage::set_has_marker() {
  _oneof_case_[0] = kMarker;
}
inline void BranchMessage::clear_marker() {
  if (has_marker()) {
    delete branch_message_.marker_;
    clear_has_branch_message();
  }
}
inline ::Marker* BranchMessage::release_marker() {
  // @@protoc_insertion_point(field_release:BranchMessage.marker)
  if (has_marker()) {
    clear_has_branch_message();
      ::Marker* temp = branch_message_.marker_;
    branch_message_.marker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Marker& BranchMessage::marker() const {
  // @@protoc_insertion_point(field_get:BranchMessage.marker)
  return has_marker()
      ? *branch_message_.marker_
      : *reinterpret_cast< ::Marker*>(&::_Marker_default_instance_);
}
inline ::Marker* BranchMessage::mutable_marker() {
  if (!has_marker()) {
    clear_branch_message();
    set_has_marker();
    branch_message_.marker_ = CreateMaybeMessage< ::Marker >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:BranchMessage.marker)
  return branch_message_.marker_;
}

// .RetrieveSnapshot retrieve_snapshot = 5;
inline bool BranchMessage::has_retrieve_snapshot() const {
  return branch_message_case() == kRetrieveSnapshot;
}
inline void BranchMessage::set_has_retrieve_snapshot() {
  _oneof_case_[0] = kRetrieveSnapshot;
}
inline void BranchMessage::clear_retrieve_snapshot() {
  if (has_retrieve_snapshot()) {
    delete branch_message_.retrieve_snapshot_;
    clear_has_branch_message();
  }
}
inline ::RetrieveSnapshot* BranchMessage::release_retrieve_snapshot() {
  // @@protoc_insertion_point(field_release:BranchMessage.retrieve_snapshot)
  if (has_retrieve_snapshot()) {
    clear_has_branch_message();
      ::RetrieveSnapshot* temp = branch_message_.retrieve_snapshot_;
    branch_message_.retrieve_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RetrieveSnapshot& BranchMessage::retrieve_snapshot() const {
  // @@protoc_insertion_point(field_get:BranchMessage.retrieve_snapshot)
  return has_retrieve_snapshot()
      ? *branch_message_.retrieve_snapshot_
      : *reinterpret_cast< ::RetrieveSnapshot*>(&::_RetrieveSnapshot_default_instance_);
}
inline ::RetrieveSnapshot* BranchMessage::mutable_retrieve_snapshot() {
  if (!has_retrieve_snapshot()) {
    clear_branch_message();
    set_has_retrieve_snapshot();
    branch_message_.retrieve_snapshot_ = CreateMaybeMessage< ::RetrieveSnapshot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:BranchMessage.retrieve_snapshot)
  return branch_message_.retrieve_snapshot_;
}

// .ReturnSnapshot return_snapshot = 6;
inline bool BranchMessage::has_return_snapshot() const {
  return branch_message_case() == kReturnSnapshot;
}
inline void BranchMessage::set_has_return_snapshot() {
  _oneof_case_[0] = kReturnSnapshot;
}
inline void BranchMessage::clear_return_snapshot() {
  if (has_return_snapshot()) {
    delete branch_message_.return_snapshot_;
    clear_has_branch_message();
  }
}
inline ::ReturnSnapshot* BranchMessage::release_return_snapshot() {
  // @@protoc_insertion_point(field_release:BranchMessage.return_snapshot)
  if (has_return_snapshot()) {
    clear_has_branch_message();
      ::ReturnSnapshot* temp = branch_message_.return_snapshot_;
    branch_message_.return_snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ReturnSnapshot& BranchMessage::return_snapshot() const {
  // @@protoc_insertion_point(field_get:BranchMessage.return_snapshot)
  return has_return_snapshot()
      ? *branch_message_.return_snapshot_
      : *reinterpret_cast< ::ReturnSnapshot*>(&::_ReturnSnapshot_default_instance_);
}
inline ::ReturnSnapshot* BranchMessage::mutable_return_snapshot() {
  if (!has_return_snapshot()) {
    clear_branch_message();
    set_has_return_snapshot();
    branch_message_.return_snapshot_ = CreateMaybeMessage< ::ReturnSnapshot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:BranchMessage.return_snapshot)
  return branch_message_.return_snapshot_;
}

inline bool BranchMessage::has_branch_message() const {
  return branch_message_case() != BRANCH_MESSAGE_NOT_SET;
}
inline void BranchMessage::clear_has_branch_message() {
  _oneof_case_[0] = BRANCH_MESSAGE_NOT_SET;
}
inline BranchMessage::BranchMessageCase BranchMessage::branch_message_case() const {
  return BranchMessage::BranchMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_bank_2eproto
