// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto

#include "bank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InitBranch_Branch_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InitSnapshot_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Marker_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RetrieveSnapshot_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReturnSnapshot_LocalSnapshot_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Transfer_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InitBranch_bank_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bank_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReturnSnapshot_bank_2eproto;
class InitBranch_BranchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitBranch_Branch> _instance;
} _InitBranch_Branch_default_instance_;
class InitBranchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitBranch> _instance;
} _InitBranch_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class InitSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitSnapshot> _instance;
} _InitSnapshot_default_instance_;
class MarkerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Marker> _instance;
} _Marker_default_instance_;
class RetrieveSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RetrieveSnapshot> _instance;
} _RetrieveSnapshot_default_instance_;
class ReturnSnapshot_LocalSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReturnSnapshot_LocalSnapshot> _instance;
} _ReturnSnapshot_LocalSnapshot_default_instance_;
class ReturnSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReturnSnapshot> _instance;
} _ReturnSnapshot_default_instance_;
class BranchMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BranchMessage> _instance;
  const ::InitBranch* init_branch_;
  const ::Transfer* transfer_;
  const ::InitSnapshot* init_snapshot_;
  const ::Marker* marker_;
  const ::RetrieveSnapshot* retrieve_snapshot_;
  const ::ReturnSnapshot* return_snapshot_;
} _BranchMessage_default_instance_;
static void InitDefaultsInitBranch_Branch_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitBranch_Branch_default_instance_;
    new (ptr) ::InitBranch_Branch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitBranch_Branch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitBranch_Branch_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitBranch_Branch_bank_2eproto}, {}};

static void InitDefaultsInitBranch_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitBranch_default_instance_;
    new (ptr) ::InitBranch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitBranch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InitBranch_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInitBranch_bank_2eproto}, {
      &scc_info_InitBranch_Branch_bank_2eproto.base,}};

static void InitDefaultsTransfer_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Transfer_default_instance_;
    new (ptr) ::Transfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Transfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Transfer_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransfer_bank_2eproto}, {}};

static void InitDefaultsInitSnapshot_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitSnapshot_default_instance_;
    new (ptr) ::InitSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitSnapshot_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitSnapshot_bank_2eproto}, {}};

static void InitDefaultsMarker_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Marker_default_instance_;
    new (ptr) ::Marker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Marker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Marker_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarker_bank_2eproto}, {}};

static void InitDefaultsRetrieveSnapshot_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RetrieveSnapshot_default_instance_;
    new (ptr) ::RetrieveSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RetrieveSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RetrieveSnapshot_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRetrieveSnapshot_bank_2eproto}, {}};

static void InitDefaultsReturnSnapshot_LocalSnapshot_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReturnSnapshot_LocalSnapshot_default_instance_;
    new (ptr) ::ReturnSnapshot_LocalSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReturnSnapshot_LocalSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReturnSnapshot_LocalSnapshot_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReturnSnapshot_LocalSnapshot_bank_2eproto}, {}};

static void InitDefaultsReturnSnapshot_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReturnSnapshot_default_instance_;
    new (ptr) ::ReturnSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReturnSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReturnSnapshot_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReturnSnapshot_bank_2eproto}, {
      &scc_info_ReturnSnapshot_LocalSnapshot_bank_2eproto.base,}};

static void InitDefaultsBranchMessage_bank_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BranchMessage_default_instance_;
    new (ptr) ::BranchMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BranchMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_BranchMessage_bank_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsBranchMessage_bank_2eproto}, {
      &scc_info_InitBranch_bank_2eproto.base,
      &scc_info_Transfer_bank_2eproto.base,
      &scc_info_InitSnapshot_bank_2eproto.base,
      &scc_info_Marker_bank_2eproto.base,
      &scc_info_RetrieveSnapshot_bank_2eproto.base,
      &scc_info_ReturnSnapshot_bank_2eproto.base,}};

void InitDefaults_bank_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InitBranch_Branch_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitBranch_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Transfer_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitSnapshot_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Marker_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RetrieveSnapshot_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReturnSnapshot_LocalSnapshot_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReturnSnapshot_bank_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BranchMessage_bank_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_bank_2eproto[9];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_bank_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_bank_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_bank_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitBranch_Branch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InitBranch_Branch, name_),
  PROTOBUF_FIELD_OFFSET(::InitBranch_Branch, ip_),
  PROTOBUF_FIELD_OFFSET(::InitBranch_Branch, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitBranch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InitBranch, balance_),
  PROTOBUF_FIELD_OFFSET(::InitBranch, all_branches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Transfer, send_branch_),
  PROTOBUF_FIELD_OFFSET(::Transfer, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InitSnapshot, snapshot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Marker, send_branch_),
  PROTOBUF_FIELD_OFFSET(::Marker, snapshot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RetrieveSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RetrieveSnapshot, snapshot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReturnSnapshot_LocalSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReturnSnapshot_LocalSnapshot, snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::ReturnSnapshot_LocalSnapshot, balance_),
  PROTOBUF_FIELD_OFFSET(::ReturnSnapshot_LocalSnapshot, channel_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReturnSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReturnSnapshot, local_snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BranchMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BranchMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::BranchMessageDefaultTypeInternal, init_branch_),
  offsetof(::BranchMessageDefaultTypeInternal, transfer_),
  offsetof(::BranchMessageDefaultTypeInternal, init_snapshot_),
  offsetof(::BranchMessageDefaultTypeInternal, marker_),
  offsetof(::BranchMessageDefaultTypeInternal, retrieve_snapshot_),
  offsetof(::BranchMessageDefaultTypeInternal, return_snapshot_),
  PROTOBUF_FIELD_OFFSET(::BranchMessage, branch_message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::InitBranch_Branch)},
  { 8, -1, sizeof(::InitBranch)},
  { 15, -1, sizeof(::Transfer)},
  { 22, -1, sizeof(::InitSnapshot)},
  { 28, -1, sizeof(::Marker)},
  { 35, -1, sizeof(::RetrieveSnapshot)},
  { 41, -1, sizeof(::ReturnSnapshot_LocalSnapshot)},
  { 49, -1, sizeof(::ReturnSnapshot)},
  { 55, -1, sizeof(::BranchMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InitBranch_Branch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InitBranch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Transfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_InitSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Marker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RetrieveSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ReturnSnapshot_LocalSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ReturnSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BranchMessage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_bank_2eproto = {
  {}, AddDescriptors_bank_2eproto, "bank.proto", schemas,
  file_default_instances, TableStruct_bank_2eproto::offsets,
  file_level_metadata_bank_2eproto, 9, file_level_enum_descriptors_bank_2eproto, file_level_service_descriptors_bank_2eproto,
};

const char descriptor_table_protodef_bank_2eproto[] =
  "\n\nbank.proto\"y\n\nInitBranch\022\017\n\007balance\030\001 "
  "\001(\r\022(\n\014all_branches\030\002 \003(\0132\022.InitBranch.B"
  "ranch\0320\n\006Branch\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001("
  "\t\022\014\n\004port\030\003 \001(\r\"/\n\010Transfer\022\023\n\013send_bran"
  "ch\030\001 \001(\t\022\016\n\006amount\030\002 \001(\r\"#\n\014InitSnapshot"
  "\022\023\n\013snapshot_id\030\001 \001(\r\"2\n\006Marker\022\023\n\013send_"
  "branch\030\001 \001(\t\022\023\n\013snapshot_id\030\002 \001(\r\"\'\n\020Ret"
  "rieveSnapshot\022\023\n\013snapshot_id\030\001 \001(\r\"\225\001\n\016R"
  "eturnSnapshot\0225\n\016local_snapshot\030\001 \001(\0132\035."
  "ReturnSnapshot.LocalSnapshot\032L\n\rLocalSna"
  "pshot\022\023\n\013snapshot_id\030\001 \001(\r\022\017\n\007balance\030\002 "
  "\001(\r\022\025\n\rchannel_state\030\003 \003(\r\"\203\002\n\rBranchMes"
  "sage\022\"\n\013init_branch\030\001 \001(\0132\013.InitBranchH\000"
  "\022\035\n\010transfer\030\002 \001(\0132\t.TransferH\000\022&\n\rinit_"
  "snapshot\030\003 \001(\0132\r.InitSnapshotH\000\022\031\n\006marke"
  "r\030\004 \001(\0132\007.MarkerH\000\022.\n\021retrieve_snapshot\030"
  "\005 \001(\0132\021.RetrieveSnapshotH\000\022*\n\017return_sna"
  "pshot\030\006 \001(\0132\017.ReturnSnapshotH\000B\020\n\016branch"
  "_messageb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_bank_2eproto = {
  false, InitDefaults_bank_2eproto, 
  descriptor_table_protodef_bank_2eproto,
  "bank.proto", &assign_descriptors_table_bank_2eproto, 736,
};

void AddDescriptors_bank_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_bank_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bank_2eproto = []() { AddDescriptors_bank_2eproto(); return true; }();

// ===================================================================

void InitBranch_Branch::InitAsDefaultInstance() {
}
class InitBranch_Branch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitBranch_Branch::kNameFieldNumber;
const int InitBranch_Branch::kIpFieldNumber;
const int InitBranch_Branch::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitBranch_Branch::InitBranch_Branch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitBranch.Branch)
}
InitBranch_Branch::InitBranch_Branch(const InitBranch_Branch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:InitBranch.Branch)
}

void InitBranch_Branch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitBranch_Branch_bank_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

InitBranch_Branch::~InitBranch_Branch() {
  // @@protoc_insertion_point(destructor:InitBranch.Branch)
  SharedDtor();
}

void InitBranch_Branch::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitBranch_Branch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitBranch_Branch& InitBranch_Branch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitBranch_Branch_bank_2eproto.base);
  return *internal_default_instance();
}


void InitBranch_Branch::Clear() {
// @@protoc_insertion_point(message_clear_start:InitBranch.Branch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitBranch_Branch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitBranch_Branch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("InitBranch.Branch.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("InitBranch.Branch.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitBranch_Branch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitBranch.Branch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InitBranch.Branch.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InitBranch.Branch.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitBranch.Branch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitBranch.Branch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitBranch_Branch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitBranch.Branch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitBranch.Branch.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitBranch.Branch.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InitBranch.Branch)
}

::google::protobuf::uint8* InitBranch_Branch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitBranch.Branch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitBranch.Branch.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InitBranch.Branch.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitBranch.Branch)
  return target;
}

size_t InitBranch_Branch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitBranch.Branch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitBranch_Branch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitBranch.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  const InitBranch_Branch* source =
      ::google::protobuf::DynamicCastToGenerated<InitBranch_Branch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitBranch.Branch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitBranch.Branch)
    MergeFrom(*source);
  }
}

void InitBranch_Branch::MergeFrom(const InitBranch_Branch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitBranch.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void InitBranch_Branch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitBranch.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitBranch_Branch::CopyFrom(const InitBranch_Branch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitBranch.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitBranch_Branch::IsInitialized() const {
  return true;
}

void InitBranch_Branch::Swap(InitBranch_Branch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitBranch_Branch::InternalSwap(InitBranch_Branch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::google::protobuf::Metadata InitBranch_Branch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InitBranch::InitAsDefaultInstance() {
}
class InitBranch::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitBranch::kBalanceFieldNumber;
const int InitBranch::kAllBranchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitBranch::InitBranch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitBranch)
}
InitBranch::InitBranch(const InitBranch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      all_branches_(from.all_branches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  balance_ = from.balance_;
  // @@protoc_insertion_point(copy_constructor:InitBranch)
}

void InitBranch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitBranch_bank_2eproto.base);
  balance_ = 0u;
}

InitBranch::~InitBranch() {
  // @@protoc_insertion_point(destructor:InitBranch)
  SharedDtor();
}

void InitBranch::SharedDtor() {
}

void InitBranch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitBranch& InitBranch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitBranch_bank_2eproto.base);
  return *internal_default_instance();
}


void InitBranch::Clear() {
// @@protoc_insertion_point(message_clear_start:InitBranch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_branches_.Clear();
  balance_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitBranch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitBranch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 balance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .InitBranch.Branch all_branches = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::InitBranch_Branch::_InternalParse;
          object = msg->add_all_branches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitBranch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 balance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .InitBranch.Branch all_branches = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_all_branches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitBranch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitBranch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitBranch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 balance = 1;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->balance(), output);
  }

  // repeated .InitBranch.Branch all_branches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_branches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->all_branches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InitBranch)
}

::google::protobuf::uint8* InitBranch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitBranch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 balance = 1;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->balance(), target);
  }

  // repeated .InitBranch.Branch all_branches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_branches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->all_branches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitBranch)
  return target;
}

size_t InitBranch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitBranch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InitBranch.Branch all_branches = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->all_branches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_branches(static_cast<int>(i)));
    }
  }

  // uint32 balance = 1;
  if (this->balance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->balance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitBranch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitBranch)
  GOOGLE_DCHECK_NE(&from, this);
  const InitBranch* source =
      ::google::protobuf::DynamicCastToGenerated<InitBranch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitBranch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitBranch)
    MergeFrom(*source);
  }
}

void InitBranch::MergeFrom(const InitBranch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitBranch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_branches_.MergeFrom(from.all_branches_);
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
}

void InitBranch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitBranch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitBranch::CopyFrom(const InitBranch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitBranch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitBranch::IsInitialized() const {
  return true;
}

void InitBranch::Swap(InitBranch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitBranch::InternalSwap(InitBranch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&all_branches_)->InternalSwap(CastToBase(&other->all_branches_));
  swap(balance_, other->balance_);
}

::google::protobuf::Metadata InitBranch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Transfer::InitAsDefaultInstance() {
}
class Transfer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transfer::kSendBranchFieldNumber;
const int Transfer::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transfer::Transfer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_branch().size() > 0) {
    send_branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_branch_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:Transfer)
}

void Transfer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Transfer_bank_2eproto.base);
  send_branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0u;
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:Transfer)
  SharedDtor();
}

void Transfer::SharedDtor() {
  send_branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Transfer_bank_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:Transfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transfer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Transfer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string send_branch = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Transfer.send_branch");
        object = msg->mutable_send_branch();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Transfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string send_branch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_branch().data(), static_cast<int>(this->send_branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Transfer.send_branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Transfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Transfer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Transfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string send_branch = 1;
  if (this->send_branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_branch().data(), static_cast<int>(this->send_branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transfer.send_branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->send_branch(), output);
  }

  // uint32 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Transfer)
}

::google::protobuf::uint8* Transfer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string send_branch = 1;
  if (this->send_branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_branch().data(), static_cast<int>(this->send_branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transfer.send_branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->send_branch(), target);
  }

  // uint32 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string send_branch = 1;
  if (this->send_branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_branch());
  }

  // uint32 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::google::protobuf::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Transfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_branch().size() > 0) {

    send_branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_branch_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void Transfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::Swap(Transfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  send_branch_.Swap(&other->send_branch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata Transfer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InitSnapshot::InitAsDefaultInstance() {
}
class InitSnapshot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitSnapshot::kSnapshotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitSnapshot::InitSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitSnapshot)
}
InitSnapshot::InitSnapshot(const InitSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_id_ = from.snapshot_id_;
  // @@protoc_insertion_point(copy_constructor:InitSnapshot)
}

void InitSnapshot::SharedCtor() {
  snapshot_id_ = 0u;
}

InitSnapshot::~InitSnapshot() {
  // @@protoc_insertion_point(destructor:InitSnapshot)
  SharedDtor();
}

void InitSnapshot::SharedDtor() {
}

void InitSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitSnapshot& InitSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitSnapshot_bank_2eproto.base);
  return *internal_default_instance();
}


void InitSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:InitSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 snapshot_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_snapshot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 snapshot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snapshot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snapshot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InitSnapshot)
}

::google::protobuf::uint8* InitSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snapshot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitSnapshot)
  return target;
}

size_t InitSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snapshot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const InitSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<InitSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitSnapshot)
    MergeFrom(*source);
  }
}

void InitSnapshot::MergeFrom(const InitSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id() != 0) {
    set_snapshot_id(from.snapshot_id());
  }
}

void InitSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitSnapshot::CopyFrom(const InitSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSnapshot::IsInitialized() const {
  return true;
}

void InitSnapshot::Swap(InitSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitSnapshot::InternalSwap(InitSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(snapshot_id_, other->snapshot_id_);
}

::google::protobuf::Metadata InitSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Marker::InitAsDefaultInstance() {
}
class Marker::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Marker::kSendBranchFieldNumber;
const int Marker::kSnapshotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Marker::Marker()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Marker)
}
Marker::Marker(const Marker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_branch().size() > 0) {
    send_branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_branch_);
  }
  snapshot_id_ = from.snapshot_id_;
  // @@protoc_insertion_point(copy_constructor:Marker)
}

void Marker::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Marker_bank_2eproto.base);
  send_branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_id_ = 0u;
}

Marker::~Marker() {
  // @@protoc_insertion_point(destructor:Marker)
  SharedDtor();
}

void Marker::SharedDtor() {
  send_branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Marker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Marker& Marker::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Marker_bank_2eproto.base);
  return *internal_default_instance();
}


void Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:Marker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snapshot_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Marker::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Marker*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string send_branch = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Marker.send_branch");
        object = msg->mutable_send_branch();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 snapshot_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_snapshot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Marker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Marker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string send_branch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_branch().data(), static_cast<int>(this->send_branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Marker.send_branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 snapshot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snapshot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Marker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Marker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Marker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Marker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string send_branch = 1;
  if (this->send_branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_branch().data(), static_cast<int>(this->send_branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Marker.send_branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->send_branch(), output);
  }

  // uint32 snapshot_id = 2;
  if (this->snapshot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->snapshot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Marker)
}

::google::protobuf::uint8* Marker::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Marker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string send_branch = 1;
  if (this->send_branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_branch().data(), static_cast<int>(this->send_branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Marker.send_branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->send_branch(), target);
  }

  // uint32 snapshot_id = 2;
  if (this->snapshot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->snapshot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Marker)
  return target;
}

size_t Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Marker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string send_branch = 1;
  if (this->send_branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_branch());
  }

  // uint32 snapshot_id = 2;
  if (this->snapshot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snapshot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Marker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Marker)
  GOOGLE_DCHECK_NE(&from, this);
  const Marker* source =
      ::google::protobuf::DynamicCastToGenerated<Marker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Marker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Marker)
    MergeFrom(*source);
  }
}

void Marker::MergeFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Marker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_branch().size() > 0) {

    send_branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_branch_);
  }
  if (from.snapshot_id() != 0) {
    set_snapshot_id(from.snapshot_id());
  }
}

void Marker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Marker::CopyFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  return true;
}

void Marker::Swap(Marker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Marker::InternalSwap(Marker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  send_branch_.Swap(&other->send_branch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(snapshot_id_, other->snapshot_id_);
}

::google::protobuf::Metadata Marker::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RetrieveSnapshot::InitAsDefaultInstance() {
}
class RetrieveSnapshot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RetrieveSnapshot::kSnapshotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RetrieveSnapshot::RetrieveSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RetrieveSnapshot)
}
RetrieveSnapshot::RetrieveSnapshot(const RetrieveSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_id_ = from.snapshot_id_;
  // @@protoc_insertion_point(copy_constructor:RetrieveSnapshot)
}

void RetrieveSnapshot::SharedCtor() {
  snapshot_id_ = 0u;
}

RetrieveSnapshot::~RetrieveSnapshot() {
  // @@protoc_insertion_point(destructor:RetrieveSnapshot)
  SharedDtor();
}

void RetrieveSnapshot::SharedDtor() {
}

void RetrieveSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveSnapshot& RetrieveSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RetrieveSnapshot_bank_2eproto.base);
  return *internal_default_instance();
}


void RetrieveSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:RetrieveSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetrieveSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RetrieveSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 snapshot_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_snapshot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetrieveSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RetrieveSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 snapshot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snapshot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RetrieveSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RetrieveSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetrieveSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RetrieveSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snapshot_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RetrieveSnapshot)
}

::google::protobuf::uint8* RetrieveSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RetrieveSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snapshot_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RetrieveSnapshot)
  return target;
}

size_t RetrieveSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RetrieveSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snapshot_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RetrieveSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<RetrieveSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RetrieveSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RetrieveSnapshot)
    MergeFrom(*source);
  }
}

void RetrieveSnapshot::MergeFrom(const RetrieveSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RetrieveSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot_id() != 0) {
    set_snapshot_id(from.snapshot_id());
  }
}

void RetrieveSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RetrieveSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveSnapshot::CopyFrom(const RetrieveSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RetrieveSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveSnapshot::IsInitialized() const {
  return true;
}

void RetrieveSnapshot::Swap(RetrieveSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RetrieveSnapshot::InternalSwap(RetrieveSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(snapshot_id_, other->snapshot_id_);
}

::google::protobuf::Metadata RetrieveSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReturnSnapshot_LocalSnapshot::InitAsDefaultInstance() {
}
class ReturnSnapshot_LocalSnapshot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnSnapshot_LocalSnapshot::kSnapshotIdFieldNumber;
const int ReturnSnapshot_LocalSnapshot::kBalanceFieldNumber;
const int ReturnSnapshot_LocalSnapshot::kChannelStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnSnapshot_LocalSnapshot::ReturnSnapshot_LocalSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReturnSnapshot.LocalSnapshot)
}
ReturnSnapshot_LocalSnapshot::ReturnSnapshot_LocalSnapshot(const ReturnSnapshot_LocalSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      channel_state_(from.channel_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&snapshot_id_, &from.snapshot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&snapshot_id_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:ReturnSnapshot.LocalSnapshot)
}

void ReturnSnapshot_LocalSnapshot::SharedCtor() {
  ::memset(&snapshot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&snapshot_id_)) + sizeof(balance_));
}

ReturnSnapshot_LocalSnapshot::~ReturnSnapshot_LocalSnapshot() {
  // @@protoc_insertion_point(destructor:ReturnSnapshot.LocalSnapshot)
  SharedDtor();
}

void ReturnSnapshot_LocalSnapshot::SharedDtor() {
}

void ReturnSnapshot_LocalSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReturnSnapshot_LocalSnapshot& ReturnSnapshot_LocalSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReturnSnapshot_LocalSnapshot_bank_2eproto.base);
  return *internal_default_instance();
}


void ReturnSnapshot_LocalSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:ReturnSnapshot.LocalSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_state_.Clear();
  ::memset(&snapshot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&snapshot_id_)) + sizeof(balance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReturnSnapshot_LocalSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReturnSnapshot_LocalSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 snapshot_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_snapshot_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 balance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 channel_state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_channel_state();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_channel_state(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReturnSnapshot_LocalSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReturnSnapshot.LocalSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 snapshot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snapshot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 balance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channel_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_state())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_channel_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReturnSnapshot.LocalSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReturnSnapshot.LocalSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReturnSnapshot_LocalSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReturnSnapshot.LocalSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snapshot_id(), output);
  }

  // uint32 balance = 2;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->balance(), output);
  }

  // repeated uint32 channel_state = 3;
  if (this->channel_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_channel_state_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->channel_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->channel_state(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReturnSnapshot.LocalSnapshot)
}

::google::protobuf::uint8* ReturnSnapshot_LocalSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReturnSnapshot.LocalSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snapshot_id(), target);
  }

  // uint32 balance = 2;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->balance(), target);
  }

  // repeated uint32 channel_state = 3;
  if (this->channel_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _channel_state_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->channel_state_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReturnSnapshot.LocalSnapshot)
  return target;
}

size_t ReturnSnapshot_LocalSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReturnSnapshot.LocalSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channel_state = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channel_state_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _channel_state_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 snapshot_id = 1;
  if (this->snapshot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snapshot_id());
  }

  // uint32 balance = 2;
  if (this->balance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->balance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnSnapshot_LocalSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReturnSnapshot.LocalSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnSnapshot_LocalSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<ReturnSnapshot_LocalSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReturnSnapshot.LocalSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReturnSnapshot.LocalSnapshot)
    MergeFrom(*source);
  }
}

void ReturnSnapshot_LocalSnapshot::MergeFrom(const ReturnSnapshot_LocalSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReturnSnapshot.LocalSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_state_.MergeFrom(from.channel_state_);
  if (from.snapshot_id() != 0) {
    set_snapshot_id(from.snapshot_id());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
}

void ReturnSnapshot_LocalSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReturnSnapshot.LocalSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnSnapshot_LocalSnapshot::CopyFrom(const ReturnSnapshot_LocalSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReturnSnapshot.LocalSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnSnapshot_LocalSnapshot::IsInitialized() const {
  return true;
}

void ReturnSnapshot_LocalSnapshot::Swap(ReturnSnapshot_LocalSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnSnapshot_LocalSnapshot::InternalSwap(ReturnSnapshot_LocalSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_state_.InternalSwap(&other->channel_state_);
  swap(snapshot_id_, other->snapshot_id_);
  swap(balance_, other->balance_);
}

::google::protobuf::Metadata ReturnSnapshot_LocalSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReturnSnapshot::InitAsDefaultInstance() {
  ::_ReturnSnapshot_default_instance_._instance.get_mutable()->local_snapshot_ = const_cast< ::ReturnSnapshot_LocalSnapshot*>(
      ::ReturnSnapshot_LocalSnapshot::internal_default_instance());
}
class ReturnSnapshot::HasBitSetters {
 public:
  static const ::ReturnSnapshot_LocalSnapshot& local_snapshot(const ReturnSnapshot* msg);
};

const ::ReturnSnapshot_LocalSnapshot&
ReturnSnapshot::HasBitSetters::local_snapshot(const ReturnSnapshot* msg) {
  return *msg->local_snapshot_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnSnapshot::kLocalSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnSnapshot::ReturnSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReturnSnapshot)
}
ReturnSnapshot::ReturnSnapshot(const ReturnSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_snapshot()) {
    local_snapshot_ = new ::ReturnSnapshot_LocalSnapshot(*from.local_snapshot_);
  } else {
    local_snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ReturnSnapshot)
}

void ReturnSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReturnSnapshot_bank_2eproto.base);
  local_snapshot_ = nullptr;
}

ReturnSnapshot::~ReturnSnapshot() {
  // @@protoc_insertion_point(destructor:ReturnSnapshot)
  SharedDtor();
}

void ReturnSnapshot::SharedDtor() {
  if (this != internal_default_instance()) delete local_snapshot_;
}

void ReturnSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReturnSnapshot& ReturnSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReturnSnapshot_bank_2eproto.base);
  return *internal_default_instance();
}


void ReturnSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:ReturnSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_snapshot_ != nullptr) {
    delete local_snapshot_;
  }
  local_snapshot_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReturnSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReturnSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReturnSnapshot_LocalSnapshot::_InternalParse;
        object = msg->mutable_local_snapshot();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReturnSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReturnSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReturnSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReturnSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReturnSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReturnSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
  if (this->has_local_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::local_snapshot(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReturnSnapshot)
}

::google::protobuf::uint8* ReturnSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReturnSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
  if (this->has_local_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::local_snapshot(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReturnSnapshot)
  return target;
}

size_t ReturnSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReturnSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ReturnSnapshot.LocalSnapshot local_snapshot = 1;
  if (this->has_local_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_snapshot_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReturnSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<ReturnSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReturnSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReturnSnapshot)
    MergeFrom(*source);
  }
}

void ReturnSnapshot::MergeFrom(const ReturnSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReturnSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_snapshot()) {
    mutable_local_snapshot()->::ReturnSnapshot_LocalSnapshot::MergeFrom(from.local_snapshot());
  }
}

void ReturnSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReturnSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnSnapshot::CopyFrom(const ReturnSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReturnSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnSnapshot::IsInitialized() const {
  return true;
}

void ReturnSnapshot::Swap(ReturnSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnSnapshot::InternalSwap(ReturnSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_snapshot_, other->local_snapshot_);
}

::google::protobuf::Metadata ReturnSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BranchMessage::InitAsDefaultInstance() {
  ::_BranchMessage_default_instance_.init_branch_ = const_cast< ::InitBranch*>(
      ::InitBranch::internal_default_instance());
  ::_BranchMessage_default_instance_.transfer_ = const_cast< ::Transfer*>(
      ::Transfer::internal_default_instance());
  ::_BranchMessage_default_instance_.init_snapshot_ = const_cast< ::InitSnapshot*>(
      ::InitSnapshot::internal_default_instance());
  ::_BranchMessage_default_instance_.marker_ = const_cast< ::Marker*>(
      ::Marker::internal_default_instance());
  ::_BranchMessage_default_instance_.retrieve_snapshot_ = const_cast< ::RetrieveSnapshot*>(
      ::RetrieveSnapshot::internal_default_instance());
  ::_BranchMessage_default_instance_.return_snapshot_ = const_cast< ::ReturnSnapshot*>(
      ::ReturnSnapshot::internal_default_instance());
}
class BranchMessage::HasBitSetters {
 public:
  static const ::InitBranch& init_branch(const BranchMessage* msg);
  static const ::Transfer& transfer(const BranchMessage* msg);
  static const ::InitSnapshot& init_snapshot(const BranchMessage* msg);
  static const ::Marker& marker(const BranchMessage* msg);
  static const ::RetrieveSnapshot& retrieve_snapshot(const BranchMessage* msg);
  static const ::ReturnSnapshot& return_snapshot(const BranchMessage* msg);
};

const ::InitBranch&
BranchMessage::HasBitSetters::init_branch(const BranchMessage* msg) {
  return *msg->branch_message_.init_branch_;
}
const ::Transfer&
BranchMessage::HasBitSetters::transfer(const BranchMessage* msg) {
  return *msg->branch_message_.transfer_;
}
const ::InitSnapshot&
BranchMessage::HasBitSetters::init_snapshot(const BranchMessage* msg) {
  return *msg->branch_message_.init_snapshot_;
}
const ::Marker&
BranchMessage::HasBitSetters::marker(const BranchMessage* msg) {
  return *msg->branch_message_.marker_;
}
const ::RetrieveSnapshot&
BranchMessage::HasBitSetters::retrieve_snapshot(const BranchMessage* msg) {
  return *msg->branch_message_.retrieve_snapshot_;
}
const ::ReturnSnapshot&
BranchMessage::HasBitSetters::return_snapshot(const BranchMessage* msg) {
  return *msg->branch_message_.return_snapshot_;
}
void BranchMessage::set_allocated_init_branch(::InitBranch* init_branch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_branch_message();
  if (init_branch) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init_branch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_branch, submessage_arena);
    }
    set_has_init_branch();
    branch_message_.init_branch_ = init_branch;
  }
  // @@protoc_insertion_point(field_set_allocated:BranchMessage.init_branch)
}
void BranchMessage::set_allocated_transfer(::Transfer* transfer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_branch_message();
  if (transfer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transfer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    set_has_transfer();
    branch_message_.transfer_ = transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:BranchMessage.transfer)
}
void BranchMessage::set_allocated_init_snapshot(::InitSnapshot* init_snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_branch_message();
  if (init_snapshot) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init_snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_snapshot, submessage_arena);
    }
    set_has_init_snapshot();
    branch_message_.init_snapshot_ = init_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:BranchMessage.init_snapshot)
}
void BranchMessage::set_allocated_marker(::Marker* marker) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_branch_message();
  if (marker) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      marker = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, marker, submessage_arena);
    }
    set_has_marker();
    branch_message_.marker_ = marker;
  }
  // @@protoc_insertion_point(field_set_allocated:BranchMessage.marker)
}
void BranchMessage::set_allocated_retrieve_snapshot(::RetrieveSnapshot* retrieve_snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_branch_message();
  if (retrieve_snapshot) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      retrieve_snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, retrieve_snapshot, submessage_arena);
    }
    set_has_retrieve_snapshot();
    branch_message_.retrieve_snapshot_ = retrieve_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:BranchMessage.retrieve_snapshot)
}
void BranchMessage::set_allocated_return_snapshot(::ReturnSnapshot* return_snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_branch_message();
  if (return_snapshot) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      return_snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, return_snapshot, submessage_arena);
    }
    set_has_return_snapshot();
    branch_message_.return_snapshot_ = return_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:BranchMessage.return_snapshot)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BranchMessage::kInitBranchFieldNumber;
const int BranchMessage::kTransferFieldNumber;
const int BranchMessage::kInitSnapshotFieldNumber;
const int BranchMessage::kMarkerFieldNumber;
const int BranchMessage::kRetrieveSnapshotFieldNumber;
const int BranchMessage::kReturnSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BranchMessage::BranchMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BranchMessage)
}
BranchMessage::BranchMessage(const BranchMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_branch_message();
  switch (from.branch_message_case()) {
    case kInitBranch: {
      mutable_init_branch()->::InitBranch::MergeFrom(from.init_branch());
      break;
    }
    case kTransfer: {
      mutable_transfer()->::Transfer::MergeFrom(from.transfer());
      break;
    }
    case kInitSnapshot: {
      mutable_init_snapshot()->::InitSnapshot::MergeFrom(from.init_snapshot());
      break;
    }
    case kMarker: {
      mutable_marker()->::Marker::MergeFrom(from.marker());
      break;
    }
    case kRetrieveSnapshot: {
      mutable_retrieve_snapshot()->::RetrieveSnapshot::MergeFrom(from.retrieve_snapshot());
      break;
    }
    case kReturnSnapshot: {
      mutable_return_snapshot()->::ReturnSnapshot::MergeFrom(from.return_snapshot());
      break;
    }
    case BRANCH_MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BranchMessage)
}

void BranchMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BranchMessage_bank_2eproto.base);
  clear_has_branch_message();
}

BranchMessage::~BranchMessage() {
  // @@protoc_insertion_point(destructor:BranchMessage)
  SharedDtor();
}

void BranchMessage::SharedDtor() {
  if (has_branch_message()) {
    clear_branch_message();
  }
}

void BranchMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BranchMessage& BranchMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BranchMessage_bank_2eproto.base);
  return *internal_default_instance();
}


void BranchMessage::clear_branch_message() {
// @@protoc_insertion_point(one_of_clear_start:BranchMessage)
  switch (branch_message_case()) {
    case kInitBranch: {
      delete branch_message_.init_branch_;
      break;
    }
    case kTransfer: {
      delete branch_message_.transfer_;
      break;
    }
    case kInitSnapshot: {
      delete branch_message_.init_snapshot_;
      break;
    }
    case kMarker: {
      delete branch_message_.marker_;
      break;
    }
    case kRetrieveSnapshot: {
      delete branch_message_.retrieve_snapshot_;
      break;
    }
    case kReturnSnapshot: {
      delete branch_message_.return_snapshot_;
      break;
    }
    case BRANCH_MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BRANCH_MESSAGE_NOT_SET;
}


void BranchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BranchMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_branch_message();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BranchMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BranchMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .InitBranch init_branch = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InitBranch::_InternalParse;
        object = msg->mutable_init_branch();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .Transfer transfer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Transfer::_InternalParse;
        object = msg->mutable_transfer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .InitSnapshot init_snapshot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InitSnapshot::_InternalParse;
        object = msg->mutable_init_snapshot();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .Marker marker = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Marker::_InternalParse;
        object = msg->mutable_marker();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .RetrieveSnapshot retrieve_snapshot = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::RetrieveSnapshot::_InternalParse;
        object = msg->mutable_retrieve_snapshot();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ReturnSnapshot return_snapshot = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReturnSnapshot::_InternalParse;
        object = msg->mutable_return_snapshot();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BranchMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BranchMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .InitBranch init_branch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_branch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Transfer transfer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .InitSnapshot init_snapshot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Marker marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RetrieveSnapshot retrieve_snapshot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retrieve_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ReturnSnapshot return_snapshot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_return_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BranchMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BranchMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BranchMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BranchMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InitBranch init_branch = 1;
  if (has_init_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::init_branch(this), output);
  }

  // .Transfer transfer = 2;
  if (has_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transfer(this), output);
  }

  // .InitSnapshot init_snapshot = 3;
  if (has_init_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::init_snapshot(this), output);
  }

  // .Marker marker = 4;
  if (has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::marker(this), output);
  }

  // .RetrieveSnapshot retrieve_snapshot = 5;
  if (has_retrieve_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::retrieve_snapshot(this), output);
  }

  // .ReturnSnapshot return_snapshot = 6;
  if (has_return_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::return_snapshot(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BranchMessage)
}

::google::protobuf::uint8* BranchMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BranchMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .InitBranch init_branch = 1;
  if (has_init_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::init_branch(this), target);
  }

  // .Transfer transfer = 2;
  if (has_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transfer(this), target);
  }

  // .InitSnapshot init_snapshot = 3;
  if (has_init_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::init_snapshot(this), target);
  }

  // .Marker marker = 4;
  if (has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::marker(this), target);
  }

  // .RetrieveSnapshot retrieve_snapshot = 5;
  if (has_retrieve_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::retrieve_snapshot(this), target);
  }

  // .ReturnSnapshot return_snapshot = 6;
  if (has_return_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::return_snapshot(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BranchMessage)
  return target;
}

size_t BranchMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BranchMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (branch_message_case()) {
    // .InitBranch init_branch = 1;
    case kInitBranch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_message_.init_branch_);
      break;
    }
    // .Transfer transfer = 2;
    case kTransfer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_message_.transfer_);
      break;
    }
    // .InitSnapshot init_snapshot = 3;
    case kInitSnapshot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_message_.init_snapshot_);
      break;
    }
    // .Marker marker = 4;
    case kMarker: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_message_.marker_);
      break;
    }
    // .RetrieveSnapshot retrieve_snapshot = 5;
    case kRetrieveSnapshot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_message_.retrieve_snapshot_);
      break;
    }
    // .ReturnSnapshot return_snapshot = 6;
    case kReturnSnapshot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_message_.return_snapshot_);
      break;
    }
    case BRANCH_MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BranchMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BranchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BranchMessage* source =
      ::google::protobuf::DynamicCastToGenerated<BranchMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BranchMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BranchMessage)
    MergeFrom(*source);
  }
}

void BranchMessage::MergeFrom(const BranchMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BranchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.branch_message_case()) {
    case kInitBranch: {
      mutable_init_branch()->::InitBranch::MergeFrom(from.init_branch());
      break;
    }
    case kTransfer: {
      mutable_transfer()->::Transfer::MergeFrom(from.transfer());
      break;
    }
    case kInitSnapshot: {
      mutable_init_snapshot()->::InitSnapshot::MergeFrom(from.init_snapshot());
      break;
    }
    case kMarker: {
      mutable_marker()->::Marker::MergeFrom(from.marker());
      break;
    }
    case kRetrieveSnapshot: {
      mutable_retrieve_snapshot()->::RetrieveSnapshot::MergeFrom(from.retrieve_snapshot());
      break;
    }
    case kReturnSnapshot: {
      mutable_return_snapshot()->::ReturnSnapshot::MergeFrom(from.return_snapshot());
      break;
    }
    case BRANCH_MESSAGE_NOT_SET: {
      break;
    }
  }
}

void BranchMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BranchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchMessage::CopyFrom(const BranchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BranchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchMessage::IsInitialized() const {
  return true;
}

void BranchMessage::Swap(BranchMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BranchMessage::InternalSwap(BranchMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(branch_message_, other->branch_message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata BranchMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_bank_2eproto);
  return ::file_level_metadata_bank_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::InitBranch_Branch* Arena::CreateMaybeMessage< ::InitBranch_Branch >(Arena* arena) {
  return Arena::CreateInternal< ::InitBranch_Branch >(arena);
}
template<> PROTOBUF_NOINLINE ::InitBranch* Arena::CreateMaybeMessage< ::InitBranch >(Arena* arena) {
  return Arena::CreateInternal< ::InitBranch >(arena);
}
template<> PROTOBUF_NOINLINE ::Transfer* Arena::CreateMaybeMessage< ::Transfer >(Arena* arena) {
  return Arena::CreateInternal< ::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::InitSnapshot* Arena::CreateMaybeMessage< ::InitSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::InitSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::Marker* Arena::CreateMaybeMessage< ::Marker >(Arena* arena) {
  return Arena::CreateInternal< ::Marker >(arena);
}
template<> PROTOBUF_NOINLINE ::RetrieveSnapshot* Arena::CreateMaybeMessage< ::RetrieveSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::RetrieveSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::ReturnSnapshot_LocalSnapshot* Arena::CreateMaybeMessage< ::ReturnSnapshot_LocalSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::ReturnSnapshot_LocalSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::ReturnSnapshot* Arena::CreateMaybeMessage< ::ReturnSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::ReturnSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::BranchMessage* Arena::CreateMaybeMessage< ::BranchMessage >(Arena* arena) {
  return Arena::CreateInternal< ::BranchMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
